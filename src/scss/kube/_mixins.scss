@import "compass/css3";

@mixin clearfix {
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}
@mixin btn-color($color, $darken: 10%) {
	background: $color;
	&:hover {
		background: darken($color, $darken);
	}
}
@mixin selection($r, $g, $b) {
	::selection { background: rgb($r, $g, $b); }
	::-moz-selection { background: rgb($r, $g, $b); }
	img::selection { background: transparent; }
	img::-moz-selection { background: transparent; 	}
}
@mixin vertical-align() {
	position: relative;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}
@mixin gradient($start: #555, $end: #333) {
	@include background-image(linear-gradient($start, $end));
}
@mixin bordered($top-color: #eee, $right-color: #eee, $bottom-color: #eee, $left-color: #eee) {
	border-top: 1px solid $top-color;
	border-right: 1px solid $right-color;
	border-bottom: 1px solid $bottom-color;
	border-left: 1px solid $left-color;
}
@mixin retina-image($path, $w: auto, $h: auto) {
	background-image: url(@path);
	// $at2x_path: ~`@{path}.replace(/\.\w+$/, function(match) { return "@2x" + match; })`;

	// @media
	// only screen and (-webkit-min-device-pixel-ratio: 2),
	// only screen and (   min--moz-device-pixel-ratio: 2),
	// only screen and (     -o-min-device-pixel-ratio: 2/1),
	// only screen and (        min-device-pixel-ratio: 2),
	// only screen and (                min-resolution: 192dpi),
	// only screen and (                min-resolution: 2dppx) {
	// 	background-image: url(@at2x_path);
	// 	background-size: @w @h;
	// }
}
@mixin transition($transition: all linear .2s) {
	-moz-transition: $transition;
	transition: $transition;
}
@mixin blur($radius) {
	-webkit-filter: blur($radius);
	-moz-filter: blur($radius);
	-ms-filter: blur($radius);
	filter: blur($radius);
}
@mixin arrow-top($color: #fff, $size: 5px, $left: 5px) {
	&:after {
		bottom: 100%;
		border: solid transparent;
		content: " ";
		height: 0;
		width: 0;
		position: absolute;
		pointer-events: none;
		border-bottom-color: $color;
		border-width: $size;
		left: $left;
	}
}
@mixin arrow-bottom($color: #fff, $size: 5px, $left: 5px) {
	&:after {
		top: 100%;
		border: solid transparent;
		content: " ";
		height: 0;
		width: 0;
		position: absolute;
		pointer-events: none;
		border-top-color: $color;
		border-width: $size;
		left: $left;
	}
}
@mixin arrow-left($color: #fff, $size: 5px, $top: 5px) {
	&:after {
		right: 100%;
		border: solid transparent;
		content: " ";
		height: 0;
		width: 0;
		position: absolute;
		pointer-events: none;
		border-right-color: $color;
		border-width: $size;
		top: $top;
	}
}
@mixin arrow-right($color: #fff, $size: 5px, $top: 5px) {
	&:after {
		left: 100%;
		border: solid transparent;
		content: " ";
		height: 0;
		width: 0;
		position: absolute;
		pointer-events: none;
		border-left-color: $color;
		border-width: $size;
		top: $top;
	}
}
@mixin close($r: 0, $g: 0, $b: 0) {
	padding: 4px 6px;
	line-height: 1;
	font-size: 18px;
	cursor: pointer;
	color: rgba($r, $g, $b, 1);
	text-decoration: none;
	@include opacity(50);
	&:before {
		content: '\00D7';
	}
	&:hover {
		@include opacity(100);
	}
}
// Grid
@mixin block($num) {
	width: (($grid-width - ($grid-gutter-width * $num)) / $num / ($grid-width / 100)) * 1%;
}

@mixin column($num) {
	width: (($grid-width - ($grid-gutter-width * ($num - 1))) / $num / ($grid-width / 100)) * 1%;
}

@mixin columns($factor, $num) {
	width: ((($grid-width - ($grid-gutter-width * ($num - 1))) / $num / ($grid-width / 100)) * $factor) + (($grid-gutter-width / ($grid-width / 100)) * ($factor - 1)) * 1%;
}

@mixin column-push($num) {
	left: ((($grid-width - ($grid-gutter-width * ($num - 1))) / $num / ($grid-width / 100)) + $grid-gutter-width/($grid-width/100)) * 1%;
}

@mixin columns-push($factor, $num) {
	left: (((($grid-width - ($grid-gutter-width * ($num - 1))) / $num / ($grid-width / 100)) * $factor) + (($grid-gutter-width / ($grid-width / 100)) * ($factor - 1)) + $grid-gutter-width/($grid-width/100)) * 1%;
}
